{"version":3,"file":"static/js/29.6abae5ae.chunk.js","mappings":"iOAEaA,EAAiB,SAAAC,GAAK,OAAIA,EAAMC,SAASC,KAAM,EAC/CC,EAAkB,SAAAH,GAAK,OAAIA,EAAMC,SAASG,SAAU,EACpDC,EAAc,SAAAL,GAAK,OAAIA,EAAMC,SAASK,KAAM,EAC5CC,EAAe,SAAAP,GAAK,OAAIA,EAAMQ,MAAO,EAErCC,GAAyBC,EAAAA,EAAAA,IAAe,CAACX,EAAgBQ,IAAe,SAACL,EAAOM,GAEzF,OAAON,EAAMM,QAAO,SAACG,GAAI,OACrBA,EAAKC,KAAKC,cAAcC,SAASN,EAAOK,cAAc,GAE9D,I,iDCJME,EAAaC,EAAAA,KAAaC,MAAM,CAClCL,KAAMI,EAAAA,KACLE,QAAQ,kHAA4D,iCACpEC,SAAS,YACVC,OAAQJ,EAAAA,KACPE,QAAQ,qFAAqF,mCAC7FC,SAAS,cAGDE,EAAc,WAEzB,IAAMC,GAAWC,EAAAA,EAAAA,MACXtB,GAAWuB,EAAAA,EAAAA,IAAYzB,GAe3B,OACI0B,EAAAA,EAAAA,KAACC,EAAAA,GAAM,CACPC,cAAe,CACbf,KAAM,GACNQ,OAAQ,IAEVQ,iBAAkBb,EAClBc,SAAU,SAACC,EAAQC,IApBL,SAAHC,GAAwB,IAAnBpB,EAAIoB,EAAJpB,KAAMQ,EAAMY,EAANZ,OAI1B,GAFgBnB,EAASgC,MAAK,SAAAC,GAAO,OAAIA,EAAQtB,OAASA,CAAI,IAG5DuB,MAAM,GAADC,OAAIxB,EAAI,iCADf,CAIA,IAAMyB,EAAa,CACfzB,KAAAA,EAAMQ,OAAAA,GACVE,GAASgB,EAAAA,EAAAA,IAAWD,GAHpB,CAIF,CAUQE,CAAYT,GACbC,EAAQS,WACT,EAAEC,UAEFC,EAAAA,EAAAA,MAACC,EAAAA,GAAU,CAAAF,SAAA,EACTC,EAAAA,EAAAA,MAACE,EAAAA,GAAW,CAAAH,SAAA,CAAC,QAEXhB,EAAAA,EAAAA,KAACoB,EAAAA,GAAW,CAAEjC,KAAK,OAAOkC,KAAK,UAC/BrB,EAAAA,EAAAA,KAACsB,EAAAA,GAAgB,CAACnC,KAAK,OAAOoC,UAAU,aAE1CN,EAAAA,EAAAA,MAACE,EAAAA,GAAW,CAAAH,SAAA,CAAC,UAEbhB,EAAAA,EAAAA,KAACoB,EAAAA,GAAW,CAAEjC,KAAK,SAASkC,KAAK,SACjCrB,EAAAA,EAAAA,KAACsB,EAAAA,GAAgB,CAACnC,KAAK,SAASoC,UAAU,aAE1CvB,EAAAA,EAAAA,KAACwB,EAAAA,GAAM,CAACH,KAAK,SAAQL,SAAC,oBAIhC,E,mBC5DaS,EAAWC,EAAAA,GAAAA,GAASC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,mHAGtB,SAAAC,GAAC,OAAIA,EAAEC,MAAMC,QAAQ,EAAE,IAGrBC,EAAYN,EAAAA,GAAAA,OAAaO,IAAAA,GAAAL,EAAAA,EAAAA,GAAA,kaAGd,SAAAC,GAAC,OAAIA,EAAEC,MAAMI,OAAOC,WAAW,IAClC,SAAAN,GAAC,OAAIA,EAAEC,MAAMM,OAAOC,CAAC,IAE7B,SAAAR,GAAC,OAAIA,EAAEC,MAAMI,OAAOI,WAAW,IACpB,SAAAT,GAAC,OAAIA,EAAEC,MAAMI,OAAOK,KAAK,IAIhC,SAAAV,GAAC,OAAIA,EAAEC,MAAMI,OAAOK,KAAK,IACd,SAAAV,GAAC,OAAIA,EAAEC,MAAMI,OAAOM,cAAc,ICfjDC,EAAkB,WAE3B,IAAM5C,GAAWC,EAAAA,EAAAA,MACXrB,GAAQsB,EAAAA,EAAAA,IAAYf,GAE1B,OACEgB,EAAAA,EAAAA,KAAA0C,EAAAA,SAAA,CAAA1B,SACGvC,EAAMkE,KAAI,SAAAzD,GAAI,OACb+B,EAAAA,EAAAA,MAACQ,EAAQ,CAAAT,SAAA,EACLC,EAAAA,EAAAA,MAAA,QAAAD,SAAA,CAAO9B,EAAKC,KAAK,KAAGD,EAAKS,WACzBK,EAAAA,EAAAA,KAACgC,EAAS,CAACX,KAAK,SAASuB,QAAS,kBAAM/C,GAASgD,EAAAA,EAAAA,IAAc3D,EAAK4D,IAAI,EAAC9B,SAAC,aAF/D9B,EAAK4D,GAKT,KAIrB,ECpBaC,EAAOrB,EAAAA,GAAAA,GAASC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,uGACd,SAAAC,GAAC,OAAIA,EAAEC,MAAMC,QAAQ,EAAE,IAG3B,SAAAF,GAAC,OAAIA,EAAEC,MAAMC,QAAQ,EAAE,ICHrBiB,EAAc,WAEvB,OAEIhD,EAAAA,EAAAA,KAAC+C,EAAI,CAAA/B,UACDhB,EAAAA,EAAAA,KAACyC,EAAe,KAG5B,ECRaQ,EAAcvB,EAAAA,GAAAA,MAAYC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,iGAG5B,SAAAC,GAAC,OAAIA,EAAEC,MAAMC,QAAQ,EAAE,IACrB,SAAAF,GAAC,OAAIA,EAAEC,MAAMI,OAAOgB,UAAU,IAE9BC,EAAczB,EAAAA,GAAAA,MAAYO,IAAAA,GAAAL,EAAAA,EAAAA,GAAA,uLAExB,SAAAC,GAAC,OAAIA,EAAEC,MAAMC,QAAQ,EAAE,IAAI,SAAAF,GAAC,OAAIA,EAAEC,MAAMC,QAAQ,EAAE,IAEzC,SAAAF,GAAC,OAAIA,EAAEC,MAAMI,OAAOC,WAAW,IAClC,SAAAN,GAAC,OAAIA,EAAEC,MAAMM,OAAOC,CAAC,I,UCR7Be,EAAgB,WAEzB,IAAMvD,GAAWC,EAAAA,EAAAA,MACXf,GAASgB,EAAAA,EAAAA,IAAYjB,GAM3B,OACImC,EAAAA,EAAAA,MAACgC,EAAW,CAAAjC,SAAA,CAAC,yBAEThB,EAAAA,EAAAA,KAACmD,EAAW,CAAC9B,KAAK,OAAOlC,KAAK,SAASkE,MAAOtE,EAC9CuE,SARa,SAAAC,GACnB1D,GAAS2D,EAAAA,EAAAA,IAAUD,EAAIE,OAAOJ,OAChC,MASJ,ECpBaK,EAAoBhC,EAAAA,GAAAA,IAAUC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,2KAKhC,SAAAC,GAAC,OAAIA,EAAEC,MAAMC,QAAQ,EAAE,IAEnB,SAAAF,GAAC,OAAIA,EAAEC,MAAMC,QAAQ,EAAE,ICEvB,SAAS4B,IAEtB,IAAM9D,GAAWC,EAAAA,EAAAA,MACXnB,GAAYoB,EAAAA,EAAAA,IAAYrB,GACxBG,GAAQkB,EAAAA,EAAAA,IAAYnB,GAM1B,OAJAgF,EAAAA,EAAAA,YAAU,WACR/D,GAASgE,EAAAA,EAAAA,MACX,GAAG,CAAChE,KAGFoB,EAAAA,EAAAA,MAACyC,EAAiB,CAAA1C,SAAA,EAChBhB,EAAAA,EAAAA,KAAA,MAAAgB,SAAI,eACJhB,EAAAA,EAAAA,KAACJ,EAAW,KACZI,EAAAA,EAAAA,KAAA,MAAAgB,SAAI,cACJhB,EAAAA,EAAAA,KAACoD,EAAa,IACbzE,IAAcE,IACfmB,EAAAA,EAAAA,KAAA,KAAAgB,SAAG,4BAEHhB,EAAAA,EAAAA,KAACgD,EAAW,MAGlB,C","sources":["redux/contacts/selectors.js","components/Form/Form.jsx","components/ContactListItem/ContactListItem.styled.js","components/ContactListItem/ContactListItem.jsx","components/Contacts/ContactList.styled.js","components/Contacts/ContactList.jsx","components/ContactFilter/ContactFilter.styled.js","components/ContactFilter/ContactFilter.jsx","components/ContactsContainer.styled.js","pages/Contacts.js"],"sourcesContent":["import { createSelector } from \"@reduxjs/toolkit\";\n\nexport const selectContacts = state => state.contacts.items;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\nexport const selectFilter = state => state.filter;\n\nexport const selectFilteredContacts = createSelector([selectContacts, selectFilter], (items, filter) => {\n   \n    return items.filter((item) =>\n        item.name.toLowerCase().includes(filter.toLowerCase()))\n\n});\n\n\n","import { useDispatch, useSelector } from 'react-redux';\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\n\nimport { StyledForm, StyledLabel, StyledField, Button, StyledErrMessage  } from './Form.styled';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { addContact } from 'redux/contacts/operations';\n\nconst formSchema = Yup.object().shape({\n    name: Yup.string() \n    .matches(/^[a-zA-Zа-яА-Я]+(([ ' -][a-zA-Zа-яА-Я ])?[a-zA-ЯА-Я]*)*$/, 'The name format is incorrect!')    \n    .required('Required'),\n    number: Yup.string()\n    .matches(/\\+?\\d{1,4}?[ .\\-\\s]?\\(?\\d{1,3}?\\)?[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,9}/,'The number format is incorrect!') \n    .required('Required'),\n})\n\nexport const ContactForm = () => {\n  \n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);  \n    \n  const saveContact = ({name, number}) => {\n  \n    const isExist = contacts.some(contact => contact.name === name);\n     \n    if (isExist) {\n      alert(`${name} is already in contacts.`);\n      return;\n    }\n    const newContact = {     \n        name, number };\n    dispatch(addContact(newContact));    \n  }; \n\n    return ( \n        <Formik\n        initialValues={{\n          name: '',\n          number: '',          \n        }}\n        validationSchema={formSchema}        \n        onSubmit={(values, actions) => { \n          saveContact(values);       \n         actions.resetForm();\n        }}       \n      >\n        <StyledForm>\n          <StyledLabel>\n            Name\n            <StyledField  name=\"name\" type=\"text\"/>\n            <StyledErrMessage name=\"name\" component=\"span\"/>\n          </StyledLabel>\n          <StyledLabel>\n            Number\n          <StyledField  name=\"number\" type='tel' />\n          <StyledErrMessage name=\"number\" component=\"span\"/>\n            </StyledLabel>          \n          <Button type=\"submit\">Add contact</Button>\n        </StyledForm>\n      </Formik>       \n    )\n};\n","import styled from \"styled-components\";\n\nexport const ListItem = styled.li`\n    display: flex;\n    justify-content :space-between;\n    gap: ${p => p.theme.spacing(2)};\n    text-transform: capitalize;\n`\nexport const DeleteBtn = styled.button`\n    font-weight: 500;    \n    letter-spacing: 0.04em;\n    border: 1px solid ${p => p.theme.colors.borderColor};\n    border-radius: ${p => p.theme.radius.m};\n    box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.15);\n    color: ${p => p.theme.colors.accentColor};\n    background-color: ${p => p.theme.colors.white};    \n    transition: background-color 250ms cubic-bezier(0.4, 0, 0.2, 1), \n        color 250ms cubic-bezier(0.4, 0, 0.2, 1);\n     &:hover{ \n        color: ${p => p.theme.colors.white};\n        background-color: ${p => p.theme.colors.secondaryColor}; \n    } \n`","import { useDispatch, useSelector } from \"react-redux\";\nimport { DeleteBtn, ListItem } from \"./ContactListItem.styled\";\nimport { selectFilteredContacts } from \"redux/contacts/selectors\";\nimport { deleteContact } from \"redux/contacts/operations\";\n\nexport const ContactListItem = () => {\n  \n    const dispatch = useDispatch();       \n    const items = useSelector(selectFilteredContacts);\n  \n    return(\n      <>\n        {items.map(item =>\n          <ListItem key={item.id}>\n              <span>{item.name}: {item.number}</span>             \n              <DeleteBtn type=\"button\" onClick={() => dispatch(deleteContact(item.id))}>\n                  Delete\n              </DeleteBtn>\n          </ListItem>\n        ) }  \n      </>      \n    );\n};","import styled from \"styled-components\";\n\nexport const List = styled.ul`       \n    padding: ${p => p.theme.spacing(3)};\n    display: flex;\n    flex-direction: column;   \n    gap: ${p => p.theme.spacing(4)};\n`\n","import { ContactListItem } from \"components/ContactListItem/ContactListItem\"\nimport { List } from \"./ContactList.styled\"\n\nexport const ContactList = () => {\n\n    return (\n      \n        <List>                     \n            <ContactListItem />                        \n        </List>        \n    )\n};","import styled from \"styled-components\";\n\n\nexport const FilterLabel = styled.label`    \n    display: flex;\n    flex-direction: column;\n    gap: ${p => p.theme.spacing(2)};  \n    color: ${p => p.theme.colors.labelColor};\n`\nexport const FilterInput = styled.input`  \n   \n    padding: ${p => p.theme.spacing(2)} ${p => p.theme.spacing(4)};\n    outline: transparent;\n    border: 1px solid ${p => p.theme.colors.borderColor};\n    border-radius: ${p => p.theme.radius.m};    \n    filter: drop-shadow(0px 4px 4px rgba(0, 0, 0, 0.15));\n`","import { useDispatch, useSelector } from \"react-redux\"\nimport { FilterInput, FilterLabel } from \"./ContactFilter.styled\"\nimport { setFilter } from \"redux/contacts/filterSlice\";\nimport { selectFilter } from \"redux/contacts/selectors\";\n\n\nexport const ContactFilter = () => {\n \n    const dispatch = useDispatch();\n    const filter = useSelector(selectFilter);\n      \n    const changeFilter = evt => {    \n      dispatch(setFilter(evt.target.value))\n    };\n\n    return (\n        <FilterLabel>\n            Find contacts by name\n            <FilterInput type=\"text\" name=\"filter\" value={filter}\n            onChange={changeFilter}/>\n        </FilterLabel>        \n    );\n};","import styled from \"styled-components\";\n\nexport const ContactsContainer = styled.div`\n    \n    display: flex;\n    flex-direction: column;\n    font-size: 18px;\n    gap: ${p => p.theme.spacing(4)};   \n    margin: 0 auto;\n    padding: ${p => p.theme.spacing(2)};\n    align-items: center;\n`","import { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport { selectError, selectIsLoading } from \"redux/contacts/selectors\";\nimport { fetchContacts } from \"redux/contacts/operations\";\nimport { ContactForm } from \"components/Form/Form\";\nimport { ContactList } from \"components/Contacts/ContactList\";\nimport { ContactFilter } from \"components/ContactFilter/ContactFilter\";\nimport { ContactsContainer } from \"components/ContactsContainer.styled\";\n\n\nexport default function Contacts(){  \n  \n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n  \n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <ContactsContainer>\n      <h2>Phonebook</h2>\n      <ContactForm />\n      <h2>Contacts</h2>\n      <ContactFilter />\n      {isLoading && !error && \n      <b>Request in progress...</b>\n      }\n      <ContactList />      \n    </ContactsContainer>\n  );\n};"],"names":["selectContacts","state","contacts","items","selectIsLoading","isLoading","selectError","error","selectFilter","filter","selectFilteredContacts","createSelector","item","name","toLowerCase","includes","formSchema","Yup","shape","matches","required","number","ContactForm","dispatch","useDispatch","useSelector","_jsx","Formik","initialValues","validationSchema","onSubmit","values","actions","_ref","some","contact","alert","concat","newContact","addContact","saveContact","resetForm","children","_jsxs","StyledForm","StyledLabel","StyledField","type","StyledErrMessage","component","Button","ListItem","styled","_templateObject","_taggedTemplateLiteral","p","theme","spacing","DeleteBtn","_templateObject2","colors","borderColor","radius","m","accentColor","white","secondaryColor","ContactListItem","_Fragment","map","onClick","deleteContact","id","List","ContactList","FilterLabel","labelColor","FilterInput","ContactFilter","value","onChange","evt","setFilter","target","ContactsContainer","Contacts","useEffect","fetchContacts"],"sourceRoot":""}